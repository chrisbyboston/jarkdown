[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "jira-download"
version = "0.1.0"
description = "Export Jira Cloud issues to Markdown with attachments"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Chris Reynolds", email = "chris@chrisbyboston.com"}
]
maintainers = [
    {name = "Chris Reynolds", email = "chris@chrisbyboston.com"}
]
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Topic :: Software Development :: Documentation",
    "Topic :: Utilities",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
    "Environment :: Console",
]
keywords = ["jira", "markdown", "export", "documentation", "atlassian", "issue-tracker"]
dependencies = [
    "requests>=2.28.0",
    "markdownify>=0.11.0",
    "python-dotenv>=0.19.0",
]

[project.urls]
Homepage = "https://github.com/chrisbyboston/jira-download"
Documentation = "https://github.com/chrisbyboston/jira-download#readme"
Repository = "https://github.com/chrisbyboston/jira-download.git"
Issues = "https://github.com/chrisbyboston/jira-download/issues"

[project.scripts]
jira-download = "jira_download_pkg:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-mock>=3.10.0",
    "pytest-cov>=4.0.0",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["jira_download_pkg*"]
exclude = ["tests*"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short"

[tool.coverage.run]
source = ["jira_download_pkg"]
omit = ["tests/*", "venv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if __name__ == .__main__.:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]